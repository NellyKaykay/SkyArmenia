// src/routes/login/+page.server.ts
import type { Actions } from './$types';
import { fail, redirect } from '@sveltejs/kit';

/** üî§ Diccionario m√≠nimo de errores para login */
const T = {
  es: {
    required_both: 'Por favor, introduce tu email y contrase√±a.',
    invalid_credentials: 'Email o contrase√±a incorrectos.',
    email_not_confirmed: 'Tu email no est√° verificado. Revisa tu bandeja y confirma tu cuenta.',
    rate_limited: 'Demasiados intentos. Prueba en unos minutos.',
    generic: 'No se pudo iniciar sesi√≥n. Int√©ntalo de nuevo.'
  },
  en: {
    required_both: 'Please enter your email and password.',
    invalid_credentials: 'Invalid email or password.',
    email_not_confirmed: 'Your email is not verified. Check your inbox and confirm your account.',
    rate_limited: 'Too many attempts. Try again in a few minutes.',
    generic: 'Could not sign in. Please try again.'
  },
  ru: {
    required_both: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ e-mail –∏ –ø–∞—Ä–æ–ª—å.',
    invalid_credentials: '–ù–µ–≤–µ—Ä–Ω—ã–π e-mail –∏–ª–∏ –ø–∞—Ä–æ–ª—å.',
    email_not_confirmed: '–í–∞—à e-mail –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.',
    rate_limited: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
    generic: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
  },
  hy: {
    required_both: '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’ß’¨. ÷É’∏’Ω’ø’∂ ’∏÷Ç ’£’°’≤’ø’∂’°’¢’°’º’®÷â',
    invalid_credentials: '’ç’≠’°’¨ ’ß’¨. ÷É’∏’Ω’ø ’Ø’°’¥ ’£’°’≤’ø’∂’°’¢’°’º÷â',
    email_not_confirmed: '’Å’•÷Ä ’ß’¨. ÷É’∏’Ω’ø’® ’π’´ ’∞’°’Ω’ø’°’ø’æ’•’¨‚Ä§ ’Ω’ø’∏÷Ç’£’•÷Ñ ÷É’∏’Ω’ø’°÷Ä’Ø’≤’® ÷á ’∞’°’Ω’ø’°’ø’•÷Ñ ’∞’°’∑’æ’®÷â',
    rate_limited: '’â’°÷É’°’¶’°’∂÷Å ’∑’°’ø ÷É’∏÷Ä’±’•÷Ä÷â ‘ø÷Ä’Ø’∂’•÷Ñ ’¥’´ ÷Ñ’°’∂’´ ÷Ä’∏’∫’• ’°’∂÷Å÷â',
    generic: '’â’∞’°’ª’∏’≤’æ’•÷Å ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø÷Ä’Ø’´’∂ ÷É’∏÷Ä’±’•’¨÷â'
  }
} as const;

type LangKey = keyof typeof T;

/** Obtiene el lang desde ?lang=, cookie "lang" o 'es' por defecto */
function getLangFrom(request: Request, cookies: import('@sveltejs/kit').Cookies, url: URL): LangKey {
  const q = (url.searchParams.get('lang') || '').toLowerCase();
  if (q && (q in T)) return q as LangKey;
  const c = (cookies.get('lang') || '').toLowerCase();
  if (c && (c in T)) return c as LangKey;
  return 'es';
}

export const actions: Actions = {
  // √öNICA acci√≥n: debe coincidir con action="?/login" en el <form>
  login: async ({ request, locals, cookies, url }) => {
    const form = await request.formData();
    const email = String(form.get('email') ?? '').trim().toLowerCase();
    const password = String(form.get('password') ?? '');
    const lang = getLangFrom(request, cookies, url);
    const t = T[lang];

    if (!email || !password) {
      return fail(400, { error: t.required_both, values: { email } });
    }

    const { data, error } = await locals.supabase.auth.signInWithPassword({ email, password });

    if (error) {
      const msg = (error.message || '').toLowerCase();

      if (/invalid login credentials|invalid email or password|credentials/.test(msg)) {
        return fail(400, { error: t.invalid_credentials, values: { email } });
      }
      if (/email not confirmed|confirm your email|not verified/.test(msg)) {
        return fail(400, { error: t.email_not_confirmed, values: { email } });
      }
      if (/rate|too many/.test(msg)) {
        return fail(429, { error: t.rate_limited, values: { email } });
      }

      return fail(400, { error: t.generic, values: { email } });
    }

    // √âxito
    if (data?.session) {
      throw redirect(303, '/');
    }

    // Caso raro: sin error y sin sesi√≥n
    return fail(400, { error: t.generic, values: { email } });
  }
};
